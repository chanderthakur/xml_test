import unittest
import inspect
import os
import sys
import urllib3
import json
import time
import six
import re
from io import StringIO
from unittest import TextTestRunner
from unittest import _TextTestResult
from unittest import TestResult
#from xmlrunner.result import _XMLTestResult
UTF8 = 'UTF-8'
# Matches invalid XML1.0 unicode characters, like control characters:
# http://www.w3.org/TR/2006/REC-xml-20060816/#charsets
INVALID_XML_1_0_UNICODE_RE = re.compile(
    u'[\x00-\x08\x0B\x0C\x0E-\x1F\uD800-\uDFFF\uFFFE\uFFFF]', re.UNICODE)
def xml_safe_unicode(base, encoding='utf-8'):
    """Return a unicode string containing only valid XML characters.
    encoding - if base is a byte string it is first decoded to unicode
        using this encoding.
    """
    if isinstance(base, six.binary_type):
        base = base.decode(encoding)
    return INVALID_XML_1_0_UNICODE_RE.sub('', base)
def to_unicode(data):
    """Returns unicode in Python2 and str in Python3"""
    if six.PY3:
         return six.text_type(data)
    try:
        # Try utf8
        return six.text_type(data)
    except UnicodeDecodeError as err:
        return repr(data).decode('utf8', 'replace')
def safe_unicode(data, encoding=None):
    return xml_safe_unicode(to_unicode(data), encoding)
def testcase_name(test_method):
    testcase = type(test_method)
    # Ignore module name if it is '__main__'
    module = testcase.__module__ + '.'
    if module == '__main__.':
        module = ''
    result = module + testcase.__name__
    return result
class _TestInfo(object):
    """
    This class keeps useful information about the execution of a
    test method.
    """
    # Possible test outcomes
    (SUCCESS, FAILURE, ERROR, SKIP) = range(4)
    def __init__(self, test_result, test_method, outcome=SUCCESS, err=None):
        self.test_result = test_result
        self.outcome = outcome
        self.elapsed_time = 0
        self.err = err
        self.stdout = test_result._stdout_data
        self.stderr = test_result._stderr_data
        self.test_description = self.test_result.getDescription(test_method)
        self.test_exception_info = (
            '' if outcome in (self.SUCCESS, self.SKIP)
            else self.test_result._exc_info_to_string(
                    self.err, test_method)
        )
        self.test_name = testcase_name(test_method)
        self.test_id = test_method.id()
    def id(self):
        return self.test_id
    def test_finished(self):
        """Save info that can only be calculated once a test has run.
        """
        self.elapsed_time = \
            self.test_result.stop_time - self.test_result.start_time
    def get_description(self):
        """
        Return a text representation of the test method.
        """
        return self.test_description
    def get_error_info(self):
        """
        Return a text representation of an exception thrown by a test
        method.
        """
        return self.test_exception_info
class _XMLTestResult(_TextTestResult):
    """
    A test result class that can express test results in a XML report.
    Used by XMLTestRunner.
    """
    def __init__(self, stream=sys.stderr, descriptions=1, verbosity=1,
                 elapsed_times=True, properties=None):
        _TextTestResult.__init__(self, stream, descriptions, verbosity)
        self.buffer = True  # we are capturing test output
        self._stdout_data = None
        self._stderr_data = None
        self.successes = []
        self.callback = None
        self.elapsed_times = elapsed_times
        self.properties = None # junit testsuite properties
    def _prepare_callback(self, test_info, target_list, verbose_str,
                          short_str):
        """
        Appends a _TestInfo to the given target list and sets a callback
        method to be called by stopTest method.
        """
        target_list.append(test_info)
        def callback():
            """Prints the test method outcome to the stream, as well as
            the elapsed time.
            """
            test_info.test_finished()
            # Ignore the elapsed times for a more reliable unit testing
            if not self.elapsed_times:
                self.start_time = self.stop_time = 0
            if self.showAll:
                self.stream.writeln(
                    '%s (%.3fs)' % (verbose_str, test_info.elapsed_time)
                )
            elif self.dots:
                self.stream.write(short_str)
        self.callback = callback
    def startTest(self, test):
        """
        Called before execute each test method.
        """
        self.start_time = time.time()
        TestResult.startTest(self, test)
        if self.showAll:
            self.stream.write('  ' + self.getDescription(test))
            self.stream.write(" ... ")
    def _save_output_data(self):
        self._stdout_data = sys.stdout.getvalue()
        self._stderr_data = sys.stderr.getvalue()
    def stopTest(self, test):
        """
        Called after execute each test method.
        """
        self._save_output_data()
        # self._stdout_data = sys.stdout.getvalue()
        # self._stderr_data = sys.stderr.getvalue()
        _TextTestResult.stopTest(self, test)
        self.stop_time = time.time()
        if self.callback and callable(self.callback):
            self.callback()
            self.callback = None
    def addSuccess(self, test):
        """
        Called when a test executes successfully.
        """
        self._save_output_data()
        self._prepare_callback(
            _TestInfo(self, test), self.successes, 'OK', '.'
        )
    def addFailure(self, test, err):
        """
        Called when a test method fails.
        """
        self._save_output_data()
        testinfo = _TestInfo(self, test, _TestInfo.FAILURE, err)
        self.failures.append((
            testinfo,
            self._exc_info_to_string(err, test)
        ))
        self._prepare_callback(testinfo, [], 'FAIL', 'F')
    def addError(self, test, err):
        """
        Called when a test method raises an error.
        """
        self._save_output_data()
        testinfo = _TestInfo(self, test, _TestInfo.ERROR, err)
        self.errors.append((
            testinfo,
            self._exc_info_to_string(err, test)
        ))
        self._prepare_callback(testinfo, [], 'ERROR', 'E')
    def addSkip(self, test, reason):
        """
        Called when a test method was skipped.
        """
        self._save_output_data()
        testinfo = _TestInfo(self, test, _TestInfo.SKIP, reason)
        self.skipped.append((testinfo, reason))
        self._prepare_callback(testinfo, [], 'SKIP', 'S')
    def printErrorList(self, flavour, errors):
        """
        Writes information about the FAIL or ERROR to the stream.
        """
        for test_info, error in errors:
            self.stream.writeln(self.separator1)
            self.stream.writeln(
                '%s [%.3fs]:' % (flavour, test_info.elapsed_time)
            )
            self.stream.writeln(self.separator2)
            self.stream.writeln('%s' % test_info.get_error_info())
    def _get_info_by_testcase(self, outsuffix):
        """
        Organizes test results by TestCase module. This information is
        used during the report generation, where a XML report will be created
        for each TestCase.
        """
        tests_by_testcase = {}
        for tests in (self.successes, self.failures, self.errors, self.skipped):
            for test_info in tests:
                if isinstance(test_info, tuple):
                    # This is a skipped, error or a failure test case
                    test_info = test_info[0]
                testcase_name = test_info.test_name
                if not testcase_name in tests_by_testcase:
                    tests_by_testcase[testcase_name] = []
                tests_by_testcase[testcase_name].append(test_info)
        return tests_by_testcase
    def _report_testsuite_properties(xml_testsuite, xml_document, properties):
        xml_properties = xml_document.createElement('properties')
        xml_testsuite.appendChild(xml_properties)
        if properties:
            for key, value in properties.items():
                prop = xml_document.createElement('property')
                prop.setAttribute('name', str(key))
                prop.setAttribute('value', str(value))
                xml_properties.appendChild(prop)
        return xml_properties
    _report_testsuite_properties = staticmethod(_report_testsuite_properties)
    def _report_testsuite(suite_name, outsuffix, tests, xml_document, properties):
        """
        Appends the testsuite section to the XML document.
        """
        print "_report_testsuite"
        testsuite = xml_document.createElement('testsuite')
        xml_document.appendChild(testsuite)
        testsuite.setAttribute('name', "%s-%s" % (suite_name, outsuffix))
        testsuite.setAttribute('tests', str(len(tests)))
        testsuite.setAttribute(
            'time', '%.3f' % sum(map(lambda e: e.elapsed_time, tests))
        )
        failures = filter(lambda e: e.outcome == _TestInfo.FAILURE, tests)
        testsuite.setAttribute('failures', str(len(list(failures))))
        errors = filter(lambda e: e.outcome == _TestInfo.ERROR, tests)
        testsuite.setAttribute('errors', str(len(list(errors))))
        #estsuite.setAttribute('priority', data_dict.get('priority'))
        #testsuite.setAttribute('scope', suite_name)
        _XMLTestResult._report_testsuite_properties(testsuite, xml_document, properties)
        systemout = xml_document.createElement('system-out')
        testsuite.appendChild(systemout)
        stdout = StringIO()
        for test in tests:
            # Merge the stdout from the tests in a class
            stdout.write(to_unicode(test.stdout))
        _XMLTestResult._createCDATAsections(xml_document, systemout, stdout.getvalue())
        systemerr = xml_document.createElement('system-err')
        testsuite.appendChild(systemerr)
        stderr = StringIO()
        for test in tests:
            # Merge the stderr from the tests in a class
            stderr.write(to_unicode(test.stderr))
        _XMLTestResult._createCDATAsections(xml_document, systemerr, stderr.getvalue())
        return testsuite
    _report_testsuite = staticmethod(_report_testsuite)
    def _test_method_name(test_id):
        """
        Returns the test method name.
        """
        return test_id.split('.')[-1]
    _test_method_name = staticmethod(_test_method_name)
    def _createCDATAsections(xmldoc, node, text):
        text = safe_unicode(text)
        pos = text.find(']]>')
        while pos >= 0:
            tmp=text[0:pos+2]
            cdata = xmldoc.createCDATASection(tmp)
            node.appendChild(cdata)
            text=text[pos+2:]
            pos = text.find(']]>')
        cdata = xmldoc.createCDATASection(text)
        node.appendChild(cdata)
    _createCDATAsections = staticmethod(_createCDATAsections)
    def _report_testcase(suite_name, test_result, xml_testsuite, xml_document):
        """
        Appends a testcase section to the XML document.
        """
        testcase = xml_document.createElement('testcase')
        xml_testsuite.appendChild(testcase)
        testcase.setAttribute('classname', suite_name)
        scope = get_test_method_attributes( data_dict_list, 'scope',  _XMLTestResult._test_method_name(test_result.test_id))
        scope[0]
        testcase.setAttribute('scope',scope[0])
        priority = get_test_method_attributes( data_dict_list, 'priority',  _XMLTestResult._test_method_name(test_result.test_id))
        priority[0]
        testcase.setAttribute(
            'name', _XMLTestResult._test_method_name(test_result.test_id) + " - " + scope[0] + " - P" + str(priority[0])
        )
        testcase.setAttribute('time', '%.3f' % test_result.elapsed_time)
        testcase.setAttribute('priority', str(priority[0]))
        if (test_result.outcome != _TestInfo.SUCCESS):
            elem_name = ('failure', 'error', 'skipped')[test_result.outcome - 1]
            failure = xml_document.createElement(elem_name)
            testcase.appendChild(failure)
            if test_result.outcome != _TestInfo.SKIP:
                failure.setAttribute('type', safe_unicode(test_result.err[0].__name__))
                failure.setAttribute('message', safe_unicode(test_result.err[1]))
                error_info = safe_unicode(test_result.get_error_info())
                _XMLTestResult._createCDATAsections(xml_document, failure, error_info)
            else:
                failure.setAttribute('type', 'skip')
                failure.setAttribute('message', safe_unicode(test_result.err))
    _report_testcase = staticmethod(_report_testcase)
    def generate_reports(self, test_runner):
        """
        Generates the XML reports to a given XMLTestRunner object.
        """
        from xml.dom.minidom import Document
        all_results = self._get_info_by_testcase(test_runner.outsuffix)
        if (isinstance(test_runner.output, six.string_types) and not
                os.path.exists(test_runner.output)):
            os.makedirs(test_runner.output)
        for suite, tests in all_results.items():
            doc = Document()
            # Build the XML file
            testsuite = _XMLTestResult._report_testsuite(
                suite, test_runner.outsuffix, tests, doc, self.properties
            )
            for test in tests:
                _XMLTestResult._report_testcase(suite, test, testsuite, doc)
            xml_content = doc.toprettyxml(indent='\t', encoding=test_runner.encoding)
            if isinstance(test_runner.output, six.string_types):
                report_file = open(
                    '%s%sTEST-%s-%s.xml' % (
                        test_runner.output, os.sep, suite,
                        test_runner.outsuffix
                    ), 'wb'
                )
                try:
                    report_file.write(xml_content)
                finally:
                    report_file.close()
            else:
                # Assume that test_runner.output is a stream
                test_runner.output.write(xml_content)
class XMLTestRunner(TextTestRunner):
    """
    A test runner class that outputs the results in JUnit like XML files.
    """
    def __init__(self, output='.', outsuffix=None, stream=sys.stderr,
                 descriptions=True, verbosity=1, elapsed_times=True,
                 failfast=False, buffer=False, encoding=UTF8):
        TextTestRunner.__init__(self, stream, descriptions, verbosity,
                                failfast=failfast, buffer=buffer)
        self.verbosity = verbosity
        self.output = output
        self.encoding = encoding
        if outsuffix:
            self.outsuffix = outsuffix
        else:
            self.outsuffix = time.strftime("%Y%m%d%H%M%S")
        self.elapsed_times = elapsed_times
    def _make_result(self):
        """
        Creates a TestResult object which will be used to store
        information about the executed tests.
        """
        return _XMLTestResult(
            self.stream, self.descriptions, self.verbosity, self.elapsed_times
        )
    def run(self, test):
        """
        Runs the given test case or test suite.
        """
        try:
            # Prepare the test execution
            result = self._make_result()
            if hasattr(test, 'properties'):
                # junit testsuite properties
                result.properties = test.properties
            # Print a nice header
            self.stream.writeln()
            self.stream.writeln('Running tests...')
            self.stream.writeln(result.separator2)
            # Execute tests
            start_time = time.time()
            test(result)
            stop_time = time.time()
            time_taken = stop_time - start_time
            # Print results
            result.printErrors()
            self.stream.writeln(result.separator2)
            run = result.testsRun
            self.stream.writeln("Ran %d test%s in %.3fs" % (
                run, run != 1 and "s" or "", time_taken)
            )
            self.stream.writeln()
            expectedFails = unexpectedSuccesses = skipped = 0
            try:
                results = map(len, (result.expectedFailures,
                                    result.unexpectedSuccesses,
                                    result.skipped))
            except AttributeError:
                pass
            else:
                expectedFails, unexpectedSuccesses, skipped = results
            # Error traces
            infos = []
            if not result.wasSuccessful():
                self.stream.write("FAILED")
                failed, errored = map(len, (result.failures, result.errors))
                if failed:
                    infos.append("failures={0}".format(failed))
                if errored:
                    infos.append("errors={0}".format(errored))
            else:
                self.stream.write("OK")
            if skipped:
                infos.append("skipped={0}".format(skipped))
            if expectedFails:
                infos.append("expected failures={0}".format(expectedFails))
            if unexpectedSuccesses:
                infos.append("unexpected successes={0}".format(unexpectedSuccesses))
            if infos:
                self.stream.writeln(" ({0})".format(", ".join(infos)))
            else:
                self.stream.write("\n")
            # Generate reports
            self.stream.writeln()
            self.stream.writeln('Generating XML reports...')
            result.generate_reports(self)
        finally:
            pass
        return result
data_dict_list =[]
def get_test_method_attributes( list_data, filter_key, method_name):
        return [d[filter_key] for d in list_data if d['test_method'] == method_name ]
def decorator(scope='smoke',priority=1, **kwargs):
    print("Inside decorator")
    def inner(func):
        print("Inside inner function")
        data_dict ={}
        data_dict['test_method'] = func.func_name
        data_dict['priority'] = priority
        data_dict['scope'] = scope
        data_dict_list.append(data_dict)
        print data_dict_list
        print priority
        print scope
        return func
    return inner
class EqualityTest(unittest.TestCase):
    @decorator(scope="regression", priority=3)
    def testEqualllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd122222222222222222222222222222222555555555555555555555tttttttttttttttttttttttttttttttttttttttttttt(self):
        self.failUnlessEqual(1, 3-2)
    @decorator(scope="release", priority=2)
    def testNotEquallllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(self):
        self.failIfEqual(1, 3-2)
    @decorator(scope="smoke", priority=1)
    def testNotEqual2(self):
        self.failIfEqual(1, 3-2)
if __name__ == '__main__':
     this_dir = os.path.dirname(__file__)
     test_suite = unittest.TestSuite()
     loader = unittest.TestLoader()
     test_suite = loader.discover(start_dir=this_dir, pattern='*')
     testRunner = XMLTestRunner(output='test-reports')
     testRunner.run(test_suite)
