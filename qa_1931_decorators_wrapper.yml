import unittest
import xmlrunner
import inspect
import os
import sys
import urllib3
import json
import time
import six
import re
from io import StringIO
#from unittest import TextTestRunner
from unittest import _TextTestResult
#from unittest import TestResult

class _XMLTestResult(_TextTestResult):
    def _report_testcase(suite_name, test_result, xml_testsuite, xml_document):
        """
        Appends a testcase section to the XML document.
        """
        testcase = xml_document.createElement('testcase')
        xml_testsuite.appendChild(testcase)
        testcase.setAttribute('classname', suite_name)
        scope = get_test_method_attributes( data_dict_list, 'scope',  _XMLTestResult._test_method_name(test_result.test_id))
        scope[0]
        testcase.setAttribute('scope',scope[0])
        priority = get_test_method_attributes( data_dict_list, 'priority',  _XMLTestResult._test_method_name(test_result.test_id))
        priority[0]
        testcase.setAttribute(
            'name', _XMLTestResult._test_method_name(test_result.test_id) + " - " + scope[0] + " - P" + str(priority[0])
        )
        testcase.setAttribute('time', '%.3f' % test_result.elapsed_time)
        testcase.setAttribute('priority', str(priority[0]))
        if (test_result.outcome != _TestInfo.SUCCESS):
            elem_name = ('failure', 'error', 'skipped')[test_result.outcome - 1]
            failure = xml_document.createElement(elem_name)
            testcase.appendChild(failure)
            if test_result.outcome != _TestInfo.SKIP:
                failure.setAttribute('type', safe_unicode(test_result.err[0].__name__))
                failure.setAttribute('message', safe_unicode(test_result.err[1]))
                error_info = safe_unicode(test_result.get_error_info())
                _XMLTestResult._createCDATAsections(xml_document, failure, error_info)
            else:
                failure.setAttribute('type', 'skip')
                failure.setAttribute('message', safe_unicode(test_result.err))
    _report_testcase = staticmethod(_report_testcase)
    
data_dict_list =[]
def get_test_method_attributes( list_data, filter_key, method_name):
        return [d[filter_key] for d in list_data if d['test_method'] == method_name ]
def decorator(scope='smoke',priority=1, **kwargs):
    print("Inside decorator")
    def inner(func):
        print("Inside inner function")
        data_dict ={}
        data_dict['test_method'] = func.func_name
        data_dict['priority'] = priority
        data_dict['scope'] = scope
        data_dict_list.append(data_dict)
        print data_dict_list
        print priority
        print scope
        return func
    return inner
class EqualityTest(unittest.TestCase):
    @decorator(scope="regression", priority=3)
    def testEqualllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd122222222222222222222222222222222555555555555555555555tttttttttttttttttttttttttttttttttttttttttttt(self):
        self.failUnlessEqual(1, 3-2)
    @decorator(scope="release", priority=2)
    def testNotEquallllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(self):
        self.failIfEqual(1, 3-2)
    @decorator(scope="smoke", priority=1)
    def testNotEqual2(self):
        self.failIfEqual(1, 3-2)
if __name__ == '__main__':
     this_dir = os.path.dirname(__file__)
     test_suite = unittest.TestSuite()
     loader = unittest.TestLoader()
     test_suite = loader.discover(start_dir=this_dir, pattern='*')
     testRunner = XMLTestRunner(output='test-reports')
     testRunner.run(test_suite)
